package db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;

public class Solution {

	private int id = 0;
	private String description;
	private int userGroupId;
	private int exerciseId;
	private Date created;
	private Date updated;

	public Solution(String description, int userGroupId, int exerciseId, Date created, Date updated) {

		this.description = description;
		this.userGroupId = userGroupId;
		this.exerciseId = exerciseId;
		this.setCreate(created);
		this.setUpdated(updated);
	}

	public Solution(String description, int userGroupId, int exerciseId) {
		this.description = description;
		this.userGroupId = userGroupId;
		this.exerciseId = exerciseId;
		this.setCreate(created);
		this.setUpdated(updated);
	}

	public Solution() {
		super();
	}

	@Override
	public String toString() {
		return "Solution [id=" + id + ", description=" + description + ", userGroupId=" + userGroupId + ", exerciseId="
				+ exerciseId + ", create=" + created + ", updated=" + updated + "]";
	}

	public void saveToDb(Connection conn) throws SQLException {

		if (this.id == 0) {
			String updateQuery = "INSERT INTO solutions(description,exercise_id, users_id) VALUES (?,?,?)";
			String[] autoGenerated = new String[] { "id", "created", "updated" };
			PreparedStatement preparedStatement;
			preparedStatement = conn.prepareStatement(updateQuery, autoGenerated);
			preparedStatement.setString(1, this.description);
			preparedStatement.setInt(2, this.exerciseId);
			preparedStatement.setInt(3, this.userGroupId);

			preparedStatement.executeUpdate();
			ResultSet set = preparedStatement.getGeneratedKeys();
			while (set.next()) {
				this.id = set.getInt(1);
			}
		} else {
			String sql = "UPDATE	solutions	SET	description=?,	exercise_id=?,	users_id=?	where	id	=	?";

			PreparedStatement preparedStatement;
			preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setString(1, this.description);
			preparedStatement.setInt(2, this.exerciseId);
			preparedStatement.setInt(3, this.userGroupId);
			preparedStatement.setInt(4, this.id);
			preparedStatement.executeUpdate();
		}

	}

	public static Solution loadById(Connection conn, int id) throws SQLException {
		String sql = "SELECT	*	FROM	solutions	where	id=?";
		PreparedStatement preparedStatement;
		preparedStatement = conn.prepareStatement(sql);
		preparedStatement.setInt(1, id);
		ResultSet resultSet = preparedStatement.executeQuery();
		if (resultSet.next()) {
			Solution loadedSolution = new Solution();
			loadedSolution.id = resultSet.getInt("id");
			loadedSolution.description = resultSet.getString("description");
			loadedSolution.userGroupId = resultSet.getInt("users_id");
			loadedSolution.exerciseId = resultSet.getInt("exercise_id");
			loadedSolution.created = resultSet.getTimestamp("created");
			loadedSolution.updated = resultSet.getTimestamp("updated");
			return loadedSolution;
		}
		return null;
	}

	static public Solution[] loadAllByExerciseId(Connection conn, int id) throws SQLException {
		ArrayList<Solution> solutions = new ArrayList<Solution>();
		String sql = "SELECT * FROM solutions JOIN exercise  ON solutions.exercise_id=exercise.id where exercise.id =? ORDER BY CREATED DESC ";
		PreparedStatement preparedStatement;
		preparedStatement = conn.prepareStatement(sql);
		preparedStatement.setInt(1, id);
		ResultSet resultSet = preparedStatement.executeQuery();
		while (resultSet.next()) {
			Solution loadedSolution = new Solution();
			loadedSolution.id = resultSet.getInt("id");
			loadedSolution.description = resultSet.getString("description");
			loadedSolution.userGroupId = resultSet.getInt("users_id");
			loadedSolution.exerciseId = resultSet.getInt("exercise_id");
			loadedSolution.created = resultSet.getTimestamp("created");
			loadedSolution.updated = resultSet.getTimestamp("updated");
			solutions.add(loadedSolution);
		}
		Solution[] sArray = new Solution[solutions.size()];
		sArray = solutions.toArray(sArray);
		return sArray;
	}

	static public Solution[] loadAllByUserIdWithOutSolution(Connection conn, int id) throws SQLException {
		ArrayList<Solution> solutions = new ArrayList<Solution>();
		String sql = "SELECT * FROM solutions \n" + "JOIN users ON solutions.users_id=users.id  \n"
				+ "JOIN exercise ON solutions.exercise_id=exercise.id\n"
				+ "where	users.id=? and solutions.description = ' ';";
		PreparedStatement preparedStatement;
		preparedStatement = conn.prepareStatement(sql);
		preparedStatement.setInt(1, id);
		ResultSet resultSet = preparedStatement.executeQuery();
		while (resultSet.next()) {
			Solution loadedSolution = new Solution();
			loadedSolution.id = resultSet.getInt("id");
			loadedSolution.description = resultSet.getString("description");
			loadedSolution.userGroupId = resultSet.getInt("users_id");
			loadedSolution.exerciseId = resultSet.getInt("exercise_id");
			loadedSolution.created = resultSet.getTimestamp("created");
			loadedSolution.updated = resultSet.getTimestamp("updated");
			solutions.add(loadedSolution);
		}
		Solution[] sArray = new Solution[solutions.size()];
		sArray = solutions.toArray(sArray);
		return sArray;
	}

	static public Solution[] loadAllByUserIdAndExId(Connection conn, int id, int ex_id) throws SQLException {
		ArrayList<Solution> solutions = new ArrayList<Solution>();
		String sql = "SELECT * FROM solutions \n" + "JOIN users ON solutions.users_id=users.id  \n"
				+ "JOIN exercise ON solutions.exercise_id=exercise.id\n"
				+ "where	users.id=? and exercise.id = ? and solutions.description = ' ';";
		PreparedStatement preparedStatement;
		preparedStatement = conn.prepareStatement(sql);
		preparedStatement.setInt(1, id);
		preparedStatement.setInt(2, ex_id);
		ResultSet resultSet = preparedStatement.executeQuery();
		while (resultSet.next()) {
			Solution loadedSolution = new Solution();
			loadedSolution.id = resultSet.getInt("id");
			loadedSolution.description = resultSet.getString("description");
			loadedSolution.userGroupId = resultSet.getInt("users_id");
			loadedSolution.exerciseId = resultSet.getInt("exercise_id");
			loadedSolution.created = resultSet.getTimestamp("created");
			loadedSolution.updated = resultSet.getTimestamp("updated");
			solutions.add(loadedSolution);
		}
		Solution[] sArray = new Solution[solutions.size()];
		sArray = solutions.toArray(sArray);
		return sArray;
	}

	static public Solution[] loadAllByUserId(Connection conn, int id) throws SQLException {
		ArrayList<Solution> solutions = new ArrayList<Solution>();
		String sql = "SELECT * FROM solutions JOIN users ON solutions.users_id=users.id where	users.id=?";
		PreparedStatement preparedStatement;
		preparedStatement = conn.prepareStatement(sql);
		preparedStatement.setInt(1, id);
		ResultSet resultSet = preparedStatement.executeQuery();
		while (resultSet.next()) {
			Solution loadedSolution = new Solution();
			loadedSolution.id = resultSet.getInt("users.id");
			loadedSolution.description = resultSet.getString("description");
			loadedSolution.userGroupId = resultSet.getInt("users_id");
			loadedSolution.exerciseId = resultSet.getInt("exercise_id");
			loadedSolution.created = resultSet.getTimestamp("created");
			loadedSolution.updated = resultSet.getTimestamp("updated");
			solutions.add(loadedSolution);
		}
		Solution[] sArray = new Solution[solutions.size()];
		sArray = solutions.toArray(sArray);
		return sArray;
	}

	static public Solution[] loadAllSolutions(Connection conn) throws SQLException {
		ArrayList<Solution> solutions = new ArrayList<Solution>();
		String sql = "SELECT	*	FROM	solutions";
		PreparedStatement preparedStatement;
		preparedStatement = conn.prepareStatement(sql);
		ResultSet resultSet = preparedStatement.executeQuery();
		while (resultSet.next()) {
			Solution loadedSolution = new Solution();
			loadedSolution.id = resultSet.getInt("id");
			loadedSolution.description = resultSet.getString("description");
			loadedSolution.userGroupId = resultSet.getInt("users_id");
			loadedSolution.exerciseId = resultSet.getInt("exercise_id");
			loadedSolution.created = resultSet.getTimestamp("created");
			loadedSolution.updated = resultSet.getTimestamp("updated");
			solutions.add(loadedSolution);
		}
		Solution[] sArray = new Solution[solutions.size()];
		sArray = solutions.toArray(sArray);
		return sArray;
	}

	public void delete(Connection conn) throws SQLException {
		if (this.id != 0) {
			String sql = "DELETE	FROM	solutions	WHERE	id=	?";
			PreparedStatement preparedStatement;
			preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setInt(1, this.id);
			preparedStatement.executeUpdate();
			this.id = 0;
		}
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public int getUserGroupId() {
		return userGroupId;
	}

	public void setUserGroupId(int userGroupId) {
		this.userGroupId = userGroupId;
	}

	public int getExerciseId() {
		return exerciseId;
	}

	public void setExerciseId(int exerciseId) {
		this.exerciseId = exerciseId;
	}

	public Date getCreate() {
		return created;
	}

	public void setCreate(Date create) {
		this.created = new Date();
	}

	public Date getUpdated() {
		return updated;
	}

	public void setUpdated(Date updated) {
		this.updated = new Date();
	}

	public int getId() {
		return id;
	}

	public int getIdSpecial() {
		return id;
	}

}
