package db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class User_Group {

	private String groupName;
	private int id = 0;

	public int getId() {
		return id;
	}

	public User_Group(String groupName) {

		this.groupName = groupName;

	}

	public User_Group() {
		super();
	}
	@Override
	public String toString() {
		return "Nazwa grupy to " + groupName + ", a jej id to: " + id;

	}

	public void saveToDb(Connection conn) throws SQLException {

		if (this.id == 0) {
			String updateQuery = "INSERT INTO user_group(name) VALUES (?)";
			String[] autoGenerated = new String[] { "id" };
			PreparedStatement preparedStatement;
			preparedStatement = conn.prepareStatement(updateQuery, autoGenerated);
			preparedStatement.setString(1, this.groupName);

			preparedStatement.executeUpdate();
			ResultSet set = preparedStatement.getGeneratedKeys();
			while (set.next()) {
				this.id = set.getInt(1);
			}
		} else {
			String sql = "UPDATE	user_group	SET	name=? where	id	=	?";
			PreparedStatement preparedStatement;
			preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setString(1, this.groupName);

			preparedStatement.setInt(2, this.id);
			preparedStatement.executeUpdate();
		}

	}

	public static User_Group loadById(Connection conn, int id) throws SQLException {
		String sql = "SELECT	*	FROM	user_group	where	id=?";
		PreparedStatement preparedStatement;
		preparedStatement = conn.prepareStatement(sql);
		preparedStatement.setInt(1, id);
		ResultSet resultSet = preparedStatement.executeQuery();
		if (resultSet.next()) {
			User_Group loadedGroup = new User_Group();
			loadedGroup.id = resultSet.getInt("id");
			loadedGroup.groupName = resultSet.getString("name");

			return loadedGroup;
		}
		return null;
	}

	static public User_Group[] loadAllGroups(Connection conn) throws SQLException {
		ArrayList<User_Group> grups = new ArrayList<User_Group>();
		String sql = "SELECT	*	FROM	user_group";
		PreparedStatement preparedStatement;
		preparedStatement = conn.prepareStatement(sql);
		ResultSet resultSet = preparedStatement.executeQuery();
		while (resultSet.next()) {
			User_Group loadedGroup = new User_Group();
			loadedGroup.id = resultSet.getInt("id");
			loadedGroup.groupName = resultSet.getString("name");
			grups.add(loadedGroup);
		}
		User_Group[] gArray = new User_Group[grups.size()];
		gArray = grups.toArray(gArray);
		return gArray;
	}
	
	public void delete(Connection conn) throws SQLException {
		if (this.id != 0) {
			String sql = "DELETE	FROM	user_group	WHERE	id=	?";
			PreparedStatement preparedStatement;
			preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setInt(1, this.id);
			preparedStatement.executeUpdate();
			this.id = 0;
		}
	}

	public String getGroupName() {
		return groupName;
	}

	public void setGroupName(String groupName) {
		this.groupName = groupName;
	}

}
